{"ast":null,"code":"'use strict';\n\nvar buffer = require('is-buffer');\nvar affix = require('./util/affix.js');\nmodule.exports = NSpell;\nvar proto = NSpell.prototype;\nproto.correct = require('./correct.js');\nproto.suggest = require('./suggest.js');\nproto.spell = require('./spell.js');\nproto.add = require('./add.js');\nproto.remove = require('./remove.js');\nproto.wordCharacters = require('./word-characters.js');\nproto.dictionary = require('./dictionary.js');\nproto.personal = require('./personal.js');\n\n// Construct a new spelling context.\nfunction NSpell(aff, dic) {\n  var index = -1;\n  var dictionaries;\n  if (!(this instanceof NSpell)) {\n    return new NSpell(aff, dic);\n  }\n  if (typeof aff === 'string' || buffer(aff)) {\n    if (typeof dic === 'string' || buffer(dic)) {\n      dictionaries = [{\n        dic: dic\n      }];\n    }\n  } else if (aff) {\n    if ('length' in aff) {\n      dictionaries = aff;\n      aff = aff[0] && aff[0].aff;\n    } else {\n      if (aff.dic) {\n        dictionaries = [aff];\n      }\n      aff = aff.aff;\n    }\n  }\n  if (!aff) {\n    throw new Error('Missing `aff` in dictionary');\n  }\n  aff = affix(aff);\n  this.data = Object.create(null);\n  this.compoundRuleCodes = aff.compoundRuleCodes;\n  this.replacementTable = aff.replacementTable;\n  this.conversion = aff.conversion;\n  this.compoundRules = aff.compoundRules;\n  this.rules = aff.rules;\n  this.flags = aff.flags;\n  if (dictionaries) {\n    while (++index < dictionaries.length) {\n      if (dictionaries[index].dic) {\n        this.dictionary(dictionaries[index].dic);\n      }\n    }\n  }\n}","map":{"version":3,"names":["buffer","require","affix","module","exports","NSpell","proto","prototype","correct","suggest","spell","add","remove","wordCharacters","dictionary","personal","aff","dic","index","dictionaries","Error","data","Object","create","compoundRuleCodes","replacementTable","conversion","compoundRules","rules","flags","length"],"sources":["C:/Users/khush/OneDrive/Desktop/new changes code/frontend1/node_modules/nspell/lib/index.js"],"sourcesContent":["'use strict'\n\nvar buffer = require('is-buffer')\nvar affix = require('./util/affix.js')\n\nmodule.exports = NSpell\n\nvar proto = NSpell.prototype\n\nproto.correct = require('./correct.js')\nproto.suggest = require('./suggest.js')\nproto.spell = require('./spell.js')\nproto.add = require('./add.js')\nproto.remove = require('./remove.js')\nproto.wordCharacters = require('./word-characters.js')\nproto.dictionary = require('./dictionary.js')\nproto.personal = require('./personal.js')\n\n// Construct a new spelling context.\nfunction NSpell(aff, dic) {\n  var index = -1\n  var dictionaries\n\n  if (!(this instanceof NSpell)) {\n    return new NSpell(aff, dic)\n  }\n\n  if (typeof aff === 'string' || buffer(aff)) {\n    if (typeof dic === 'string' || buffer(dic)) {\n      dictionaries = [{dic: dic}]\n    }\n  } else if (aff) {\n    if ('length' in aff) {\n      dictionaries = aff\n      aff = aff[0] && aff[0].aff\n    } else {\n      if (aff.dic) {\n        dictionaries = [aff]\n      }\n\n      aff = aff.aff\n    }\n  }\n\n  if (!aff) {\n    throw new Error('Missing `aff` in dictionary')\n  }\n\n  aff = affix(aff)\n\n  this.data = Object.create(null)\n  this.compoundRuleCodes = aff.compoundRuleCodes\n  this.replacementTable = aff.replacementTable\n  this.conversion = aff.conversion\n  this.compoundRules = aff.compoundRules\n  this.rules = aff.rules\n  this.flags = aff.flags\n\n  if (dictionaries) {\n    while (++index < dictionaries.length) {\n      if (dictionaries[index].dic) {\n        this.dictionary(dictionaries[index].dic)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIC,KAAK,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAEtCE,MAAM,CAACC,OAAO,GAAGC,MAAM;AAEvB,IAAIC,KAAK,GAAGD,MAAM,CAACE,SAAS;AAE5BD,KAAK,CAACE,OAAO,GAAGP,OAAO,CAAC,cAAc,CAAC;AACvCK,KAAK,CAACG,OAAO,GAAGR,OAAO,CAAC,cAAc,CAAC;AACvCK,KAAK,CAACI,KAAK,GAAGT,OAAO,CAAC,YAAY,CAAC;AACnCK,KAAK,CAACK,GAAG,GAAGV,OAAO,CAAC,UAAU,CAAC;AAC/BK,KAAK,CAACM,MAAM,GAAGX,OAAO,CAAC,aAAa,CAAC;AACrCK,KAAK,CAACO,cAAc,GAAGZ,OAAO,CAAC,sBAAsB,CAAC;AACtDK,KAAK,CAACQ,UAAU,GAAGb,OAAO,CAAC,iBAAiB,CAAC;AAC7CK,KAAK,CAACS,QAAQ,GAAGd,OAAO,CAAC,eAAe,CAAC;;AAEzC;AACA,SAASI,MAAMA,CAACW,GAAG,EAAEC,GAAG,EAAE;EACxB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,YAAY;EAEhB,IAAI,EAAE,IAAI,YAAYd,MAAM,CAAC,EAAE;IAC7B,OAAO,IAAIA,MAAM,CAACW,GAAG,EAAEC,GAAG,CAAC;EAC7B;EAEA,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIhB,MAAM,CAACgB,GAAG,CAAC,EAAE;IAC1C,IAAI,OAAOC,GAAG,KAAK,QAAQ,IAAIjB,MAAM,CAACiB,GAAG,CAAC,EAAE;MAC1CE,YAAY,GAAG,CAAC;QAACF,GAAG,EAAEA;MAAG,CAAC,CAAC;IAC7B;EACF,CAAC,MAAM,IAAID,GAAG,EAAE;IACd,IAAI,QAAQ,IAAIA,GAAG,EAAE;MACnBG,YAAY,GAAGH,GAAG;MAClBA,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,CAACA,GAAG;IAC5B,CAAC,MAAM;MACL,IAAIA,GAAG,CAACC,GAAG,EAAE;QACXE,YAAY,GAAG,CAACH,GAAG,CAAC;MACtB;MAEAA,GAAG,GAAGA,GAAG,CAACA,GAAG;IACf;EACF;EAEA,IAAI,CAACA,GAAG,EAAE;IACR,MAAM,IAAII,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEAJ,GAAG,GAAGd,KAAK,CAACc,GAAG,CAAC;EAEhB,IAAI,CAACK,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC/B,IAAI,CAACC,iBAAiB,GAAGR,GAAG,CAACQ,iBAAiB;EAC9C,IAAI,CAACC,gBAAgB,GAAGT,GAAG,CAACS,gBAAgB;EAC5C,IAAI,CAACC,UAAU,GAAGV,GAAG,CAACU,UAAU;EAChC,IAAI,CAACC,aAAa,GAAGX,GAAG,CAACW,aAAa;EACtC,IAAI,CAACC,KAAK,GAAGZ,GAAG,CAACY,KAAK;EACtB,IAAI,CAACC,KAAK,GAAGb,GAAG,CAACa,KAAK;EAEtB,IAAIV,YAAY,EAAE;IAChB,OAAO,EAAED,KAAK,GAAGC,YAAY,CAACW,MAAM,EAAE;MACpC,IAAIX,YAAY,CAACD,KAAK,CAAC,CAACD,GAAG,EAAE;QAC3B,IAAI,CAACH,UAAU,CAACK,YAAY,CAACD,KAAK,CAAC,CAACD,GAAG,CAAC;MAC1C;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khush\\\\OneDrive\\\\Desktop\\\\new changes code\\\\frontend1\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// MedicalChatbot.jsx\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Recorder from \"recorder-js\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backendUrl = \"http://localhost:5000\";\nconst MedicalChatbot = () => {\n  _s();\n  const [conversation, setConversation] = useState([]);\n  const [diagnosis, setDiagnosis] = useState(null);\n  const [keySymptoms, setKeySymptoms] = useState(\"\");\n  const [followUps, setFollowUps] = useState(\"\");\n  const [recommendations, setRecommendations] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const audioContextRef = useRef(null);\n  const recorderRef = useRef(null);\n  const silenceTimer = useRef(null);\n  const speechRef = useRef(null);\n  const fullDiagnosisRef = useRef(\"\");\n  useEffect(() => {\n    if (fullDiagnosisRef.current) {\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < fullDiagnosisRef.current.length) {\n          setDisplayedText(prev => prev + fullDiagnosisRef.current[index]);\n          index++;\n        } else {\n          clearInterval(interval);\n        }\n      }, 30);\n      return () => clearInterval(interval);\n    }\n  }, [diagnosis]);\n  const handleStartRecording = async () => {\n    setError(null);\n    setIsRecording(true);\n    try {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      recorderRef.current = new Recorder(audioContextRef.current);\n      recorderRef.current.init(stream);\n      recorderRef.current.start();\n      const audioInput = audioContextRef.current.createMediaStreamSource(stream);\n      const analyser = audioContextRef.current.createAnalyser();\n      audioInput.connect(analyser);\n      const checkSilence = () => {\n        const buffer = new Float32Array(analyser.fftSize);\n        analyser.getFloatTimeDomainData(buffer);\n        const maxAmplitude = Math.max(...buffer.map(Math.abs));\n        if (maxAmplitude < 0.01) {\n          if (!silenceTimer.current) {\n            silenceTimer.current = setTimeout(() => handleStopRecording(), 1500);\n          }\n        } else {\n          clearTimeout(silenceTimer.current);\n          silenceTimer.current = null;\n        }\n        requestAnimationFrame(checkSilence);\n      };\n      checkSilence();\n    } catch (error) {\n      setError(\"Microphone access denied or not available.\");\n      setIsRecording(false);\n    }\n  };\n  const handleStopRecording = async () => {\n    setIsRecording(false);\n    setIsProcessing(true);\n    clearTimeout(silenceTimer.current);\n    try {\n      const {\n        blob\n      } = await recorderRef.current.stop();\n      const audioFile = new File([blob], \"audio.wav\", {\n        type: \"audio/wav\"\n      });\n      const formData = new FormData();\n      formData.append(\"file\", audioFile);\n      const transcriptionResponse = await fetch(`${backendUrl}/transcribe`, {\n        method: \"POST\",\n        body: formData\n      });\n      const transcriptionData = await transcriptionResponse.json();\n      if (transcriptionData.error) {\n        setError(transcriptionData.error);\n        setIsProcessing(false);\n        return;\n      }\n      setConversation([{\n        role: \"AI\",\n        text: `Transcribed Text: ${transcriptionData.transcription}`\n      }]);\n      const analysisResponse = await fetch(`${backendUrl}/analyze`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: transcriptionData.transcription\n        })\n      });\n      const analysisData = await analysisResponse.json();\n      const result = analysisData.analysis;\n      fullDiagnosisRef.current = result;\n      setDiagnosis(result);\n      const extractSection = label => {\n        const safeLabel = label.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n        const regex = new RegExp(`\\\\*\\\\*${safeLabel}:\\\\*\\\\*([\\\\s\\\\S]*?)(\\\\n\\\\*\\\\*|$)`);\n        const match = result.match(regex);\n        return match ? match[1].trim() : \"\";\n      };\n      setKeySymptoms(extractSection(\"Key Symptoms Identified\"));\n      setFollowUps(extractSection(\"Follow-up Questions for Further Diagnosis\"));\n      setRecommendations(extractSection(\"Recommended Next Steps\"));\n    } catch (error) {\n      setError(\"Error processing the audio.\");\n    }\n    setIsProcessing(false);\n  };\n  const speakText = text => {\n    if (speechRef.current) window.speechSynthesis.cancel();\n    const speech = new SpeechSynthesisUtterance();\n    speech.text = text;\n    speech.lang = \"en-US\";\n    speech.rate = 1;\n    speech.pitch = 1;\n    speechRef.current = speech;\n    window.speechSynthesis.speak(speech);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Medical AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: conversation.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), displayedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"diagnosis-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: displayedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => speakText(fullDiagnosisRef.current),\n        children: \"Play Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), followUps && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => speakText(followUps),\n        children: \"Speak Follow-up Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }, this), recommendations && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => speakText(recommendations),\n        children: \"Speak Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), !isRecording && !isProcessing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Listening... Speak now.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicalChatbot, \"47bAps660D0E6ZqoesYpP8ATWmg=\");\n_c = MedicalChatbot;\nexport default MedicalChatbot;\nvar _c;\n$RefreshReg$(_c, \"MedicalChatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Recorder","jsxDEV","_jsxDEV","backendUrl","MedicalChatbot","_s","conversation","setConversation","diagnosis","setDiagnosis","keySymptoms","setKeySymptoms","followUps","setFollowUps","recommendations","setRecommendations","error","setError","isRecording","setIsRecording","isProcessing","setIsProcessing","displayedText","setDisplayedText","audioContextRef","recorderRef","silenceTimer","speechRef","fullDiagnosisRef","current","index","interval","setInterval","length","prev","clearInterval","handleStartRecording","window","AudioContext","webkitAudioContext","stream","navigator","mediaDevices","getUserMedia","audio","init","start","audioInput","createMediaStreamSource","analyser","createAnalyser","connect","checkSilence","buffer","Float32Array","fftSize","getFloatTimeDomainData","maxAmplitude","Math","max","map","abs","setTimeout","handleStopRecording","clearTimeout","requestAnimationFrame","blob","stop","audioFile","File","type","formData","FormData","append","transcriptionResponse","fetch","method","body","transcriptionData","json","role","text","transcription","analysisResponse","headers","JSON","stringify","analysisData","result","analysis","extractSection","label","safeLabel","replace","regex","RegExp","match","trim","speakText","speechSynthesis","cancel","speech","SpeechSynthesisUtterance","lang","rate","pitch","speak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","onClick","_c","$RefreshReg$"],"sources":["C:/Users/khush/OneDrive/Desktop/new changes code/frontend1/src/Chatbot.js"],"sourcesContent":["// MedicalChatbot.jsx\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport Recorder from \"recorder-js\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst backendUrl = \"http://localhost:5000\";\r\n\r\nconst MedicalChatbot = () => {\r\n  const [conversation, setConversation] = useState([]);\r\n  const [diagnosis, setDiagnosis] = useState(null);\r\n  const [keySymptoms, setKeySymptoms] = useState(\"\");\r\n  const [followUps, setFollowUps] = useState(\"\");\r\n  const [recommendations, setRecommendations] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n\r\n  const audioContextRef = useRef(null);\r\n  const recorderRef = useRef(null);\r\n  const silenceTimer = useRef(null);\r\n  const speechRef = useRef(null);\r\n  const fullDiagnosisRef = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    if (fullDiagnosisRef.current) {\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        if (index < fullDiagnosisRef.current.length) {\r\n          setDisplayedText((prev) => prev + fullDiagnosisRef.current[index]);\r\n          index++;\r\n        } else {\r\n          clearInterval(interval);\r\n        }\r\n      }, 30);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [diagnosis]);\r\n\r\n  const handleStartRecording = async () => {\r\n    setError(null);\r\n    setIsRecording(true);\r\n\r\n    try {\r\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      recorderRef.current = new Recorder(audioContextRef.current);\r\n      recorderRef.current.init(stream);\r\n      recorderRef.current.start();\r\n\r\n      const audioInput = audioContextRef.current.createMediaStreamSource(stream);\r\n      const analyser = audioContextRef.current.createAnalyser();\r\n      audioInput.connect(analyser);\r\n\r\n      const checkSilence = () => {\r\n        const buffer = new Float32Array(analyser.fftSize);\r\n        analyser.getFloatTimeDomainData(buffer);\r\n        const maxAmplitude = Math.max(...buffer.map(Math.abs));\r\n\r\n        if (maxAmplitude < 0.01) {\r\n          if (!silenceTimer.current) {\r\n            silenceTimer.current = setTimeout(() => handleStopRecording(), 1500);\r\n          }\r\n        } else {\r\n          clearTimeout(silenceTimer.current);\r\n          silenceTimer.current = null;\r\n        }\r\n        requestAnimationFrame(checkSilence);\r\n      };\r\n\r\n      checkSilence();\r\n    } catch (error) {\r\n      setError(\"Microphone access denied or not available.\");\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const handleStopRecording = async () => {\r\n    setIsRecording(false);\r\n    setIsProcessing(true);\r\n    clearTimeout(silenceTimer.current);\r\n\r\n    try {\r\n      const { blob } = await recorderRef.current.stop();\r\n      const audioFile = new File([blob], \"audio.wav\", { type: \"audio/wav\" });\r\n      const formData = new FormData();\r\n      formData.append(\"file\", audioFile);\r\n\r\n      const transcriptionResponse = await fetch(`${backendUrl}/transcribe`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const transcriptionData = await transcriptionResponse.json();\r\n      if (transcriptionData.error) {\r\n        setError(transcriptionData.error);\r\n        setIsProcessing(false);\r\n        return;\r\n      }\r\n\r\n      setConversation([{ role: \"AI\", text: `Transcribed Text: ${transcriptionData.transcription}` }]);\r\n\r\n      const analysisResponse = await fetch(`${backendUrl}/analyze`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ text: transcriptionData.transcription }),\r\n      });\r\n\r\n      const analysisData = await analysisResponse.json();\r\n      const result = analysisData.analysis;\r\n\r\n      fullDiagnosisRef.current = result;\r\n      setDiagnosis(result);\r\n\r\n      const extractSection = (label) => {\r\n        const safeLabel = label.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n        const regex = new RegExp(`\\\\*\\\\*${safeLabel}:\\\\*\\\\*([\\\\s\\\\S]*?)(\\\\n\\\\*\\\\*|$)`);\r\n        const match = result.match(regex);\r\n        return match ? match[1].trim() : \"\";\r\n      };\r\n\r\n      setKeySymptoms(extractSection(\"Key Symptoms Identified\"));\r\n      setFollowUps(extractSection(\"Follow-up Questions for Further Diagnosis\"));\r\n      setRecommendations(extractSection(\"Recommended Next Steps\"));\r\n    } catch (error) {\r\n      setError(\"Error processing the audio.\");\r\n    }\r\n\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const speakText = (text) => {\r\n    if (speechRef.current) window.speechSynthesis.cancel();\r\n    const speech = new SpeechSynthesisUtterance();\r\n    speech.text = text;\r\n    speech.lang = \"en-US\";\r\n    speech.rate = 1;\r\n    speech.pitch = 1;\r\n    speechRef.current = speech;\r\n    window.speechSynthesis.speak(speech);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h1>Medical AI Chatbot</h1>\r\n      {error && <p className=\"error-message\">Error: {error}</p>}\r\n\r\n      <div className=\"chatbox\">\r\n        {conversation.map((msg, index) => (\r\n          <div key={index} className=\"message\">\r\n            <strong>{msg.role}: </strong>{msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {displayedText && (\r\n        <div className=\"diagnosis-box\">\r\n          <h2>Diagnosis</h2>\r\n          <p>{displayedText}</p>\r\n          <button onClick={() => speakText(fullDiagnosisRef.current)}>Play Diagnosis</button>\r\n          {followUps && <button onClick={() => speakText(followUps)}>Speak Follow-up Questions</button>}\r\n          {recommendations && <button onClick={() => speakText(recommendations)}>Speak Recommendations</button>}\r\n        </div>\r\n      )}\r\n\r\n      {!isRecording && !isProcessing && (\r\n        <button onClick={handleStartRecording}>Start Recording</button>\r\n      )}\r\n\r\n      {isRecording && <p>Listening... Speak now.</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MedicalChatbot;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,UAAU,GAAG,uBAAuB;AAE1C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM2B,eAAe,GAAG1B,MAAM,CAAC,IAAI,CAAC;EACpC,MAAM2B,WAAW,GAAG3B,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM4B,YAAY,GAAG5B,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM6B,SAAS,GAAG7B,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM8B,gBAAgB,GAAG9B,MAAM,CAAC,EAAE,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd,IAAI6B,gBAAgB,CAACC,OAAO,EAAE;MAC5B,IAAIC,KAAK,GAAG,CAAC;MACb,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAIF,KAAK,GAAGF,gBAAgB,CAACC,OAAO,CAACI,MAAM,EAAE;UAC3CV,gBAAgB,CAAEW,IAAI,IAAKA,IAAI,GAAGN,gBAAgB,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;UAClEA,KAAK,EAAE;QACT,CAAC,MAAM;UACLK,aAAa,CAACJ,QAAQ,CAAC;QACzB;MACF,CAAC,EAAE,EAAE,CAAC;MACN,OAAO,MAAMI,aAAa,CAACJ,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACvB,SAAS,CAAC,CAAC;EAEf,MAAM4B,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvCnB,QAAQ,CAAC,IAAI,CAAC;IACdE,cAAc,CAAC,IAAI,CAAC;IAEpB,IAAI;MACFK,eAAe,CAACK,OAAO,GAAG,KAAKQ,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;MAClF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEnB,WAAW,CAACI,OAAO,GAAG,IAAI7B,QAAQ,CAACwB,eAAe,CAACK,OAAO,CAAC;MAC3DJ,WAAW,CAACI,OAAO,CAACgB,IAAI,CAACL,MAAM,CAAC;MAChCf,WAAW,CAACI,OAAO,CAACiB,KAAK,CAAC,CAAC;MAE3B,MAAMC,UAAU,GAAGvB,eAAe,CAACK,OAAO,CAACmB,uBAAuB,CAACR,MAAM,CAAC;MAC1E,MAAMS,QAAQ,GAAGzB,eAAe,CAACK,OAAO,CAACqB,cAAc,CAAC,CAAC;MACzDH,UAAU,CAACI,OAAO,CAACF,QAAQ,CAAC;MAE5B,MAAMG,YAAY,GAAGA,CAAA,KAAM;QACzB,MAAMC,MAAM,GAAG,IAAIC,YAAY,CAACL,QAAQ,CAACM,OAAO,CAAC;QACjDN,QAAQ,CAACO,sBAAsB,CAACH,MAAM,CAAC;QACvC,MAAMI,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGN,MAAM,CAACO,GAAG,CAACF,IAAI,CAACG,GAAG,CAAC,CAAC;QAEtD,IAAIJ,YAAY,GAAG,IAAI,EAAE;UACvB,IAAI,CAAC/B,YAAY,CAACG,OAAO,EAAE;YACzBH,YAAY,CAACG,OAAO,GAAGiC,UAAU,CAAC,MAAMC,mBAAmB,CAAC,CAAC,EAAE,IAAI,CAAC;UACtE;QACF,CAAC,MAAM;UACLC,YAAY,CAACtC,YAAY,CAACG,OAAO,CAAC;UAClCH,YAAY,CAACG,OAAO,GAAG,IAAI;QAC7B;QACAoC,qBAAqB,CAACb,YAAY,CAAC;MACrC,CAAC;MAEDA,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdC,QAAQ,CAAC,4CAA4C,CAAC;MACtDE,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAM4C,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC5C,cAAc,CAAC,KAAK,CAAC;IACrBE,eAAe,CAAC,IAAI,CAAC;IACrB2C,YAAY,CAACtC,YAAY,CAACG,OAAO,CAAC;IAElC,IAAI;MACF,MAAM;QAAEqC;MAAK,CAAC,GAAG,MAAMzC,WAAW,CAACI,OAAO,CAACsC,IAAI,CAAC,CAAC;MACjD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACH,IAAI,CAAC,EAAE,WAAW,EAAE;QAAEI,IAAI,EAAE;MAAY,CAAC,CAAC;MACtE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,SAAS,CAAC;MAElC,MAAMM,qBAAqB,GAAG,MAAMC,KAAK,CAAC,GAAGxE,UAAU,aAAa,EAAE;QACpEyE,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,MAAMO,iBAAiB,GAAG,MAAMJ,qBAAqB,CAACK,IAAI,CAAC,CAAC;MAC5D,IAAID,iBAAiB,CAAC9D,KAAK,EAAE;QAC3BC,QAAQ,CAAC6D,iBAAiB,CAAC9D,KAAK,CAAC;QACjCK,eAAe,CAAC,KAAK,CAAC;QACtB;MACF;MAEAd,eAAe,CAAC,CAAC;QAAEyE,IAAI,EAAE,IAAI;QAAEC,IAAI,EAAE,qBAAqBH,iBAAiB,CAACI,aAAa;MAAG,CAAC,CAAC,CAAC;MAE/F,MAAMC,gBAAgB,GAAG,MAAMR,KAAK,CAAC,GAAGxE,UAAU,UAAU,EAAE;QAC5DyE,MAAM,EAAE,MAAM;QACdQ,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CP,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAAC;UAAEL,IAAI,EAAEH,iBAAiB,CAACI;QAAc,CAAC;MAChE,CAAC,CAAC;MAEF,MAAMK,YAAY,GAAG,MAAMJ,gBAAgB,CAACJ,IAAI,CAAC,CAAC;MAClD,MAAMS,MAAM,GAAGD,YAAY,CAACE,QAAQ;MAEpC7D,gBAAgB,CAACC,OAAO,GAAG2D,MAAM;MACjC/E,YAAY,CAAC+E,MAAM,CAAC;MAEpB,MAAME,cAAc,GAAIC,KAAK,IAAK;QAChC,MAAMC,SAAS,GAAGD,KAAK,CAACE,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;QAC9D,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,SAASH,SAAS,kCAAkC,CAAC;QAC9E,MAAMI,KAAK,GAAGR,MAAM,CAACQ,KAAK,CAACF,KAAK,CAAC;QACjC,OAAOE,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,GAAG,EAAE;MACrC,CAAC;MAEDtF,cAAc,CAAC+E,cAAc,CAAC,yBAAyB,CAAC,CAAC;MACzD7E,YAAY,CAAC6E,cAAc,CAAC,2CAA2C,CAAC,CAAC;MACzE3E,kBAAkB,CAAC2E,cAAc,CAAC,wBAAwB,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAO1E,KAAK,EAAE;MACdC,QAAQ,CAAC,6BAA6B,CAAC;IACzC;IAEAI,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAM6E,SAAS,GAAIjB,IAAI,IAAK;IAC1B,IAAItD,SAAS,CAACE,OAAO,EAAEQ,MAAM,CAAC8D,eAAe,CAACC,MAAM,CAAC,CAAC;IACtD,MAAMC,MAAM,GAAG,IAAIC,wBAAwB,CAAC,CAAC;IAC7CD,MAAM,CAACpB,IAAI,GAAGA,IAAI;IAClBoB,MAAM,CAACE,IAAI,GAAG,OAAO;IACrBF,MAAM,CAACG,IAAI,GAAG,CAAC;IACfH,MAAM,CAACI,KAAK,GAAG,CAAC;IAChB9E,SAAS,CAACE,OAAO,GAAGwE,MAAM;IAC1BhE,MAAM,CAAC8D,eAAe,CAACO,KAAK,CAACL,MAAM,CAAC;EACtC,CAAC;EAED,oBACEnG,OAAA;IAAKyG,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC1G,OAAA;MAAA0G,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BhG,KAAK,iBAAId,OAAA;MAAGyG,SAAS,EAAC,eAAe;MAAAC,QAAA,GAAC,SAAO,EAAC5F,KAAK;IAAA;MAAA6F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzD9G,OAAA;MAAKyG,SAAS,EAAC,SAAS;MAAAC,QAAA,EACrBtG,YAAY,CAACsD,GAAG,CAAC,CAACqD,GAAG,EAAEnF,KAAK,kBAC3B5B,OAAA;QAAiByG,SAAS,EAAC,SAAS;QAAAC,QAAA,gBAClC1G,OAAA;UAAA0G,QAAA,GAASK,GAAG,CAACjC,IAAI,EAAC,IAAE;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAACC,GAAG,CAAChC,IAAI;MAAA,GAD9BnD,KAAK;QAAA+E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAEL1F,aAAa,iBACZpB,OAAA;MAAKyG,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B1G,OAAA;QAAA0G,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClB9G,OAAA;QAAA0G,QAAA,EAAItF;MAAa;QAAAuF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB9G,OAAA;QAAQgH,OAAO,EAAEA,CAAA,KAAMhB,SAAS,CAACtE,gBAAgB,CAACC,OAAO,CAAE;QAAA+E,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAClFpG,SAAS,iBAAIV,OAAA;QAAQgH,OAAO,EAAEA,CAAA,KAAMhB,SAAS,CAACtF,SAAS,CAAE;QAAAgG,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC5FlG,eAAe,iBAAIZ,OAAA;QAAQgH,OAAO,EAAEA,CAAA,KAAMhB,SAAS,CAACpF,eAAe,CAAE;QAAA8F,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClG,CACN,EAEA,CAAC9F,WAAW,IAAI,CAACE,YAAY,iBAC5BlB,OAAA;MAAQgH,OAAO,EAAE9E,oBAAqB;MAAAwE,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAC/D,EAEA9F,WAAW,iBAAIhB,OAAA;MAAA0G,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAAC3G,EAAA,CArKID,cAAc;AAAA+G,EAAA,GAAd/G,cAAc;AAuKpB,eAAeA,cAAc;AAAC,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
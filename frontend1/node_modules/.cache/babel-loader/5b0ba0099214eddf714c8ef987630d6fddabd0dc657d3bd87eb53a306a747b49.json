{"ast":null,"code":"import React,{useState,useRef}from\"react\";import Recorder from\"recorder-js\";import\"./Chatbot.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const backendUrl=\"https://render.com/docs/web-services#port-binding\";const MedicalChatbot=()=>{const[conversation,setConversation]=useState([]);const[diagnosis,setDiagnosis]=useState(null);const[error,setError]=useState(null);const[isRecording,setIsRecording]=useState(false);const[isProcessing,setIsProcessing]=useState(false);const audioContextRef=useRef(null);const recorderRef=useRef(null);const silenceTimer=useRef(null);const speechRef=useRef(null);const handleStartRecording=async()=>{setError(null);setIsRecording(true);try{audioContextRef.current=new(window.AudioContext||window.webkitAudioContext)();const stream=await navigator.mediaDevices.getUserMedia({audio:true});recorderRef.current=new Recorder(audioContextRef.current);recorderRef.current.init(stream);recorderRef.current.start();// Set up silence detection\nconst audioInput=audioContextRef.current.createMediaStreamSource(stream);const analyser=audioContextRef.current.createAnalyser();audioInput.connect(analyser);const checkSilence=()=>{const buffer=new Float32Array(analyser.fftSize);analyser.getFloatTimeDomainData(buffer);const maxAmplitude=Math.max(...buffer.map(Math.abs));if(maxAmplitude<0.01){// Silence threshold\nif(!silenceTimer.current){silenceTimer.current=setTimeout(()=>handleStopRecording(),1500);// Stop after 1.5s of silence\n}}else{clearTimeout(silenceTimer.current);silenceTimer.current=null;}requestAnimationFrame(checkSilence);};checkSilence();}catch(error){setError(\"Microphone access denied or not available.\");setIsRecording(false);}};const handleStopRecording=async()=>{setIsRecording(false);setIsProcessing(true);clearTimeout(silenceTimer.current);try{const{blob}=await recorderRef.current.stop();const audioFile=new File([blob],\"audio.wav\",{type:\"audio/wav\"});const formData=new FormData();formData.append(\"file\",audioFile);// Send recorded audio to backend\nconst transcriptionResponse=await fetch(`${backendUrl}/transcribe`,{method:\"POST\",body:formData});const transcriptionData=await transcriptionResponse.json();if(transcriptionData.error){setError(transcriptionData.error);setIsProcessing(false);return;}// Update conversation with transcription\nsetConversation([{role:\"AI\",text:`Transcribed Text: ${transcriptionData.transcription}`}]);// Send text for analysis\nconst analysisResponse=await fetch(`${backendUrl}/analyze`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({text:transcriptionData.transcription})});const analysisData=await analysisResponse.json();let formattedDiagnosis=analysisData.analysis.replace(\"**Key Symptoms Identified:**\",\"<strong><em>Key Symptoms Identified:</em></strong>\").replace(\"**Possible Medical Diagnosis:**\",\"<strong><em>Possible Medical Diagnosis:</em></strong>\").replace(\"**Follow-up Questions for Further Diagnosis:**\",\"<strong><em>Follow-up Questions for Further Diagnosis:</em></strong>\").replace(\"**Recommended Next Steps:**\",\"<strong><em>Recommended Next Steps:</em></strong>\");setDiagnosis(formattedDiagnosis);}catch(error){setError(\"Error processing the audio.\");}setIsProcessing(false);};const handlePlayDiagnosis=()=>{if(diagnosis){// Stop any ongoing speech\nif(speechRef.current){window.speechSynthesis.cancel();}const speech=new SpeechSynthesisUtterance();speech.text=diagnosis.replace(/<\\/?[^>]+(>|$)/g,\"\");// Remove HTML tags for clean speech\nspeech.lang=\"en-US\";// Set language to English\nspeech.rate=1;// Adjust speed (1 is normal)\nspeech.pitch=1;// Adjust pitch\nspeechRef.current=speech;window.speechSynthesis.speak(speech);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Medical AI Chatbot\"}),error&&/*#__PURE__*/_jsxs(\"p\",{className:\"error-message\",children:[\"Error: \",error]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatbox\",children:conversation.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.role,\": \"]}),msg.text]},index))}),diagnosis&&/*#__PURE__*/_jsxs(\"div\",{className:\"diagnosis-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Diagnosis\"}),/*#__PURE__*/_jsx(\"p\",{dangerouslySetInnerHTML:{__html:diagnosis}}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePlayDiagnosis,children:\"Play Diagnosis\"})]}),!isRecording&&!isProcessing&&/*#__PURE__*/_jsx(\"button\",{onClick:handleStartRecording,children:\"Start Recording\"}),isRecording&&/*#__PURE__*/_jsx(\"p\",{children:\"Listening... Speak now.\"})]});};export default MedicalChatbot;","map":{"version":3,"names":["React","useState","useRef","Recorder","jsx","_jsx","jsxs","_jsxs","backendUrl","MedicalChatbot","conversation","setConversation","diagnosis","setDiagnosis","error","setError","isRecording","setIsRecording","isProcessing","setIsProcessing","audioContextRef","recorderRef","silenceTimer","speechRef","handleStartRecording","current","window","AudioContext","webkitAudioContext","stream","navigator","mediaDevices","getUserMedia","audio","init","start","audioInput","createMediaStreamSource","analyser","createAnalyser","connect","checkSilence","buffer","Float32Array","fftSize","getFloatTimeDomainData","maxAmplitude","Math","max","map","abs","setTimeout","handleStopRecording","clearTimeout","requestAnimationFrame","blob","stop","audioFile","File","type","formData","FormData","append","transcriptionResponse","fetch","method","body","transcriptionData","json","role","text","transcription","analysisResponse","headers","JSON","stringify","analysisData","formattedDiagnosis","analysis","replace","handlePlayDiagnosis","speechSynthesis","cancel","speech","SpeechSynthesisUtterance","lang","rate","pitch","speak","className","children","msg","index","dangerouslySetInnerHTML","__html","onClick"],"sources":["C:/Users/khush/OneDrive/Desktop/chatbot ai/frontend1/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Recorder from \"recorder-js\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst backendUrl = \"https://render.com/docs/web-services#port-binding\";\r\n\r\nconst MedicalChatbot = () => {\r\n  const [conversation, setConversation] = useState([]);\r\n  const [diagnosis, setDiagnosis] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const audioContextRef = useRef(null);\r\n  const recorderRef = useRef(null);\r\n  const silenceTimer = useRef(null);\r\n  const speechRef = useRef(null);\r\n\r\n  const handleStartRecording = async () => {\r\n    setError(null);\r\n    setIsRecording(true);\r\n\r\n    try {\r\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      recorderRef.current = new Recorder(audioContextRef.current);\r\n      recorderRef.current.init(stream);\r\n      recorderRef.current.start();\r\n\r\n      // Set up silence detection\r\n      const audioInput = audioContextRef.current.createMediaStreamSource(stream);\r\n      const analyser = audioContextRef.current.createAnalyser();\r\n      audioInput.connect(analyser);\r\n\r\n      const checkSilence = () => {\r\n        const buffer = new Float32Array(analyser.fftSize);\r\n        analyser.getFloatTimeDomainData(buffer);\r\n        const maxAmplitude = Math.max(...buffer.map(Math.abs));\r\n\r\n        if (maxAmplitude < 0.01) { // Silence threshold\r\n          if (!silenceTimer.current) {\r\n            silenceTimer.current = setTimeout(() => handleStopRecording(), 1500); // Stop after 1.5s of silence\r\n          }\r\n        } else {\r\n          clearTimeout(silenceTimer.current);\r\n          silenceTimer.current = null;\r\n        }\r\n        requestAnimationFrame(checkSilence);\r\n      };\r\n\r\n      checkSilence();\r\n    } catch (error) {\r\n      setError(\"Microphone access denied or not available.\");\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const handleStopRecording = async () => {\r\n    setIsRecording(false);\r\n    setIsProcessing(true);\r\n    clearTimeout(silenceTimer.current);\r\n\r\n    try {\r\n      const { blob } = await recorderRef.current.stop();\r\n      const audioFile = new File([blob], \"audio.wav\", { type: \"audio/wav\" });\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", audioFile);\r\n\r\n      // Send recorded audio to backend\r\n      const transcriptionResponse = await fetch(`${backendUrl}/transcribe`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const transcriptionData = await transcriptionResponse.json();\r\n      if (transcriptionData.error) {\r\n        setError(transcriptionData.error);\r\n        setIsProcessing(false);\r\n        return;\r\n      }\r\n\r\n      // Update conversation with transcription\r\n      setConversation([{ role: \"AI\", text: `Transcribed Text: ${transcriptionData.transcription}` }]);\r\n\r\n      // Send text for analysis\r\n      const analysisResponse = await fetch(`${backendUrl}/analyze`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ text: transcriptionData.transcription }),\r\n      });\r\n\r\n      const analysisData = await analysisResponse.json();\r\n      let formattedDiagnosis = analysisData.analysis\r\n        .replace(\"**Key Symptoms Identified:**\", \"<strong><em>Key Symptoms Identified:</em></strong>\")\r\n        .replace(\"**Possible Medical Diagnosis:**\", \"<strong><em>Possible Medical Diagnosis:</em></strong>\")\r\n        .replace(\"**Follow-up Questions for Further Diagnosis:**\", \"<strong><em>Follow-up Questions for Further Diagnosis:</em></strong>\")\r\n        .replace(\"**Recommended Next Steps:**\", \"<strong><em>Recommended Next Steps:</em></strong>\");\r\n\r\n      setDiagnosis(formattedDiagnosis);\r\n    } catch (error) {\r\n      setError(\"Error processing the audio.\");\r\n    }\r\n\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const handlePlayDiagnosis = () => {\r\n    if (diagnosis) {\r\n      // Stop any ongoing speech\r\n      if (speechRef.current) {\r\n        window.speechSynthesis.cancel();\r\n      }\r\n\r\n      const speech = new SpeechSynthesisUtterance();\r\n      speech.text = diagnosis.replace(/<\\/?[^>]+(>|$)/g, \"\"); // Remove HTML tags for clean speech\r\n      speech.lang = \"en-US\"; // Set language to English\r\n      speech.rate = 1; // Adjust speed (1 is normal)\r\n      speech.pitch = 1; // Adjust pitch\r\n\r\n      speechRef.current = speech;\r\n      window.speechSynthesis.speak(speech);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h1>Medical AI Chatbot</h1>\r\n      {error && <p className=\"error-message\">Error: {error}</p>}\r\n      \r\n      <div className=\"chatbox\">\r\n        {conversation.map((msg, index) => (\r\n          <div key={index} className=\"message\">\r\n            <strong>{msg.role}: </strong>{msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {diagnosis && (\r\n        <div className=\"diagnosis-box\">\r\n          <h2>Diagnosis</h2>\r\n          <p dangerouslySetInnerHTML={{ __html: diagnosis }}></p>\r\n          <button onClick={handlePlayDiagnosis}>Play Diagnosis</button>\r\n        </div>\r\n      )}\r\n\r\n      {!isRecording && !isProcessing && (\r\n        <button onClick={handleStartRecording}>Start Recording</button>\r\n      )}\r\n\r\n      {isRecording && <p>Listening... Speak now.</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MedicalChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
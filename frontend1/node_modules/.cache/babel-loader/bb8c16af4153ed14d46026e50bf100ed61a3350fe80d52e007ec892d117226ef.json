{"ast":null,"code":"'use strict';\n\nvar apply = require('./apply.js');\nmodule.exports = add;\nvar push = [].push;\nvar NO_RULES = [];\n\n// Add `rules` for `word` to the table.\nfunction addRules(dict, word, rules) {\n  var curr = dict[word];\n\n  // Some dictionaries will list the same word multiple times with different\n  // rule sets.\n  if (word in dict) {\n    if (curr === NO_RULES) {\n      dict[word] = rules.concat();\n    } else {\n      push.apply(curr, rules);\n    }\n  } else {\n    dict[word] = rules.concat();\n  }\n}\nfunction add(dict, word, codes, options) {\n  var position = -1;\n  var rule;\n  var offset;\n  var subposition;\n  var suboffset;\n  var combined;\n  var newWords;\n  var otherNewWords;\n\n  // Compound words.\n  if (!('NEEDAFFIX' in options.flags) || codes.indexOf(options.flags.NEEDAFFIX) < 0) {\n    addRules(dict, word, codes);\n  }\n  while (++position < codes.length) {\n    rule = options.rules[codes[position]];\n    if (codes[position] in options.compoundRuleCodes) {\n      options.compoundRuleCodes[codes[position]].push(word);\n    }\n    if (rule) {\n      newWords = apply(word, rule, options.rules, []);\n      offset = -1;\n      while (++offset < newWords.length) {\n        if (!(newWords[offset] in dict)) {\n          dict[newWords[offset]] = NO_RULES;\n        }\n        if (rule.combineable) {\n          subposition = position;\n          while (++subposition < codes.length) {\n            combined = options.rules[codes[subposition]];\n            if (combined && combined.combineable && rule.type !== combined.type) {\n              otherNewWords = apply(newWords[offset], combined, options.rules, []);\n              suboffset = -1;\n              while (++suboffset < otherNewWords.length) {\n                if (!(otherNewWords[suboffset] in dict)) {\n                  dict[otherNewWords[suboffset]] = NO_RULES;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["apply","require","module","exports","add","push","NO_RULES","addRules","dict","word","rules","curr","concat","codes","options","position","rule","offset","subposition","suboffset","combined","newWords","otherNewWords","flags","indexOf","NEEDAFFIX","length","compoundRuleCodes","combineable","type"],"sources":["C:/Users/khush/OneDrive/Desktop/new changes code/frontend1/node_modules/nspell/lib/util/add.js"],"sourcesContent":["'use strict'\n\nvar apply = require('./apply.js')\n\nmodule.exports = add\n\nvar push = [].push\n\nvar NO_RULES = []\n\n// Add `rules` for `word` to the table.\nfunction addRules(dict, word, rules) {\n  var curr = dict[word]\n\n  // Some dictionaries will list the same word multiple times with different\n  // rule sets.\n  if (word in dict) {\n    if (curr === NO_RULES) {\n      dict[word] = rules.concat()\n    } else {\n      push.apply(curr, rules)\n    }\n  } else {\n    dict[word] = rules.concat()\n  }\n}\n\nfunction add(dict, word, codes, options) {\n  var position = -1\n  var rule\n  var offset\n  var subposition\n  var suboffset\n  var combined\n  var newWords\n  var otherNewWords\n\n  // Compound words.\n  if (\n    !('NEEDAFFIX' in options.flags) ||\n    codes.indexOf(options.flags.NEEDAFFIX) < 0\n  ) {\n    addRules(dict, word, codes)\n  }\n\n  while (++position < codes.length) {\n    rule = options.rules[codes[position]]\n\n    if (codes[position] in options.compoundRuleCodes) {\n      options.compoundRuleCodes[codes[position]].push(word)\n    }\n\n    if (rule) {\n      newWords = apply(word, rule, options.rules, [])\n      offset = -1\n\n      while (++offset < newWords.length) {\n        if (!(newWords[offset] in dict)) {\n          dict[newWords[offset]] = NO_RULES\n        }\n\n        if (rule.combineable) {\n          subposition = position\n\n          while (++subposition < codes.length) {\n            combined = options.rules[codes[subposition]]\n\n            if (\n              combined &&\n              combined.combineable &&\n              rule.type !== combined.type\n            ) {\n              otherNewWords = apply(\n                newWords[offset],\n                combined,\n                options.rules,\n                []\n              )\n              suboffset = -1\n\n              while (++suboffset < otherNewWords.length) {\n                if (!(otherNewWords[suboffset] in dict)) {\n                  dict[otherNewWords[suboffset]] = NO_RULES\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}